/*
 * This file is generated by jOOQ.
*/
package database.tables;


import database.Indexes;
import database.Keys;
import database.Orbit;
import database.tables.records.AssignmentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Assignment extends TableImpl<AssignmentRecord> {

    private static final long serialVersionUID = -533806263;

    /**
     * The reference instance of <code>orbit.assignment</code>
     */
    public static final Assignment ASSIGNMENT = new Assignment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssignmentRecord> getRecordType() {
        return AssignmentRecord.class;
    }

    /**
     * The column <code>orbit.assignment.ID</code>.
     */
    public final TableField<AssignmentRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>orbit.assignment.Year</code>.
     */
    public final TableField<AssignmentRecord, String> YEAR = createField("Year", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>orbit.assignment.Name</code>.
     */
    public final TableField<AssignmentRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>orbit.assignment.Type</code>.
     */
    public final TableField<AssignmentRecord, String> TYPE = createField("Type", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>orbit.assignment.Max_Points</code>.
     */
    public final TableField<AssignmentRecord, String> MAX_POINTS = createField("Max_Points", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>orbit.assignment.Course_ID</code>.
     */
    public final TableField<AssignmentRecord, Integer> COURSE_ID = createField("Course_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>orbit.assignment</code> table reference
     */
    public Assignment() {
        this(DSL.name("assignment"), null);
    }

    /**
     * Create an aliased <code>orbit.assignment</code> table reference
     */
    public Assignment(String alias) {
        this(DSL.name(alias), ASSIGNMENT);
    }

    /**
     * Create an aliased <code>orbit.assignment</code> table reference
     */
    public Assignment(Name alias) {
        this(alias, ASSIGNMENT);
    }

    private Assignment(Name alias, Table<AssignmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Assignment(Name alias, Table<AssignmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Orbit.ORBIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSIGNMENT_COURSE_ID, Indexes.ASSIGNMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AssignmentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ASSIGNMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AssignmentRecord> getPrimaryKey() {
        return Keys.KEY_ASSIGNMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AssignmentRecord>> getKeys() {
        return Arrays.<UniqueKey<AssignmentRecord>>asList(Keys.KEY_ASSIGNMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AssignmentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AssignmentRecord, ?>>asList(Keys.ASSIGNMENT_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Assignment as(String alias) {
        return new Assignment(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Assignment as(Name alias) {
        return new Assignment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Assignment rename(String name) {
        return new Assignment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Assignment rename(Name name) {
        return new Assignment(name, null);
    }
}
