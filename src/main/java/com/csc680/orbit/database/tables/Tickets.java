/*
 * This file is generated by jOOQ.
*/
package com.csc680.orbit.database.tables;


import com.csc680.orbit.database.Indexes;
import com.csc680.orbit.database.Keys;
import com.csc680.orbit.database.Orbit;
import com.csc680.orbit.database.tables.records.TicketsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tickets extends TableImpl<TicketsRecord> {

    private static final long serialVersionUID = -716762189;

    /**
     * The reference instance of <code>orbit.tickets</code>
     */
    public static final Tickets TICKETS = new Tickets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketsRecord> getRecordType() {
        return TicketsRecord.class;
    }

    /**
     * The column <code>orbit.tickets.ID</code>.
     */
    public final TableField<TicketsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>orbit.tickets.Name</code>.
     */
    public final TableField<TicketsRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>orbit.tickets.Description</code>.
     */
    public final TableField<TicketsRecord, String> DESCRIPTION = createField("Description", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>orbit.tickets.Priority</code>.
     */
    public final TableField<TicketsRecord, String> PRIORITY = createField("Priority", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>orbit.tickets.User_ID</code>.
     */
    public final TableField<TicketsRecord, Integer> USER_ID = createField("User_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>orbit.tickets</code> table reference
     */
    public Tickets() {
        this(DSL.name("tickets"), null);
    }

    /**
     * Create an aliased <code>orbit.tickets</code> table reference
     */
    public Tickets(String alias) {
        this(DSL.name(alias), TICKETS);
    }

    /**
     * Create an aliased <code>orbit.tickets</code> table reference
     */
    public Tickets(Name alias) {
        this(alias, TICKETS);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tickets(Name alias, Table<TicketsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Orbit.ORBIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TICKETS_PRIMARY, Indexes.TICKETS_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TicketsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TICKETS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TicketsRecord> getPrimaryKey() {
        return Keys.KEY_TICKETS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TicketsRecord>> getKeys() {
        return Arrays.<UniqueKey<TicketsRecord>>asList(Keys.KEY_TICKETS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TicketsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TicketsRecord, ?>>asList(Keys.TICKETS_IBFK_1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tickets as(String alias) {
        return new Tickets(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tickets as(Name alias) {
        return new Tickets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(String name) {
        return new Tickets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tickets rename(Name name) {
        return new Tickets(name, null);
    }
}
