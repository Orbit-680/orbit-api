/*
 * This file is generated by jOOQ.
*/
package com.csc680.orbit.database.tables;


import com.csc680.orbit.database.Indexes;
import com.csc680.orbit.database.Keys;
import com.csc680.orbit.database.Orbit;
import com.csc680.orbit.database.tables.records.AccountLinkStudentRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountLinkStudent extends TableImpl<AccountLinkStudentRecord> {

    private static final long serialVersionUID = 786573675;

    /**
     * The reference instance of <code>orbit.account_link_student</code>
     */
    public static final AccountLinkStudent ACCOUNT_LINK_STUDENT = new AccountLinkStudent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountLinkStudentRecord> getRecordType() {
        return AccountLinkStudentRecord.class;
    }

    /**
     * The column <code>orbit.account_link_student.ID</code>.
     */
    public final TableField<AccountLinkStudentRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>orbit.account_link_student.Date_Linked</code>.
     */
    public final TableField<AccountLinkStudentRecord, Date> DATE_LINKED = createField("Date_Linked", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>orbit.account_link_student.Active</code>.
     */
    public final TableField<AccountLinkStudentRecord, String> ACTIVE = createField("Active", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>orbit.account_link_student.User_ID</code>.
     */
    public final TableField<AccountLinkStudentRecord, Integer> USER_ID = createField("User_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>orbit.account_link_student.Student_ID</code>.
     */
    public final TableField<AccountLinkStudentRecord, Integer> STUDENT_ID = createField("Student_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>orbit.account_link_student</code> table reference
     */
    public AccountLinkStudent() {
        this(DSL.name("account_link_student"), null);
    }

    /**
     * Create an aliased <code>orbit.account_link_student</code> table reference
     */
    public AccountLinkStudent(String alias) {
        this(DSL.name(alias), ACCOUNT_LINK_STUDENT);
    }

    /**
     * Create an aliased <code>orbit.account_link_student</code> table reference
     */
    public AccountLinkStudent(Name alias) {
        this(alias, ACCOUNT_LINK_STUDENT);
    }

    private AccountLinkStudent(Name alias, Table<AccountLinkStudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountLinkStudent(Name alias, Table<AccountLinkStudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Orbit.ORBIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNT_LINK_STUDENT_PRIMARY, Indexes.ACCOUNT_LINK_STUDENT_STUDENT_ID, Indexes.ACCOUNT_LINK_STUDENT_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountLinkStudentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_LINK_STUDENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountLinkStudentRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_LINK_STUDENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountLinkStudentRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountLinkStudentRecord>>asList(Keys.KEY_ACCOUNT_LINK_STUDENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccountLinkStudentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountLinkStudentRecord, ?>>asList(Keys.ACCOUNT_LINK_STUDENT_IBFK_1, Keys.ACCOUNT_LINK_STUDENT_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountLinkStudent as(String alias) {
        return new AccountLinkStudent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountLinkStudent as(Name alias) {
        return new AccountLinkStudent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountLinkStudent rename(String name) {
        return new AccountLinkStudent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountLinkStudent rename(Name name) {
        return new AccountLinkStudent(name, null);
    }
}
