/*
 * This file is generated by jOOQ.
*/
package com.csc680.orbit.database.tables;


import com.csc680.orbit.database.Indexes;
import com.csc680.orbit.database.Keys;
import com.csc680.orbit.database.Orbit;
import com.csc680.orbit.database.tables.records.SchoolStudentRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchoolStudent extends TableImpl<SchoolStudentRecord> {

    private static final long serialVersionUID = 1434938124;

    /**
     * The reference instance of <code>orbit.school_student</code>
     */
    public static final SchoolStudent SCHOOL_STUDENT = new SchoolStudent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchoolStudentRecord> getRecordType() {
        return SchoolStudentRecord.class;
    }

    /**
     * The column <code>orbit.school_student.ID</code>.
     */
    public final TableField<SchoolStudentRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>orbit.school_student.School_ID</code>.
     */
    public final TableField<SchoolStudentRecord, Integer> SCHOOL_ID = createField("School_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>orbit.school_student.Student_ID</code>.
     */
    public final TableField<SchoolStudentRecord, Integer> STUDENT_ID = createField("Student_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>orbit.school_student</code> table reference
     */
    public SchoolStudent() {
        this(DSL.name("school_student"), null);
    }

    /**
     * Create an aliased <code>orbit.school_student</code> table reference
     */
    public SchoolStudent(String alias) {
        this(DSL.name(alias), SCHOOL_STUDENT);
    }

    /**
     * Create an aliased <code>orbit.school_student</code> table reference
     */
    public SchoolStudent(Name alias) {
        this(alias, SCHOOL_STUDENT);
    }

    private SchoolStudent(Name alias, Table<SchoolStudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchoolStudent(Name alias, Table<SchoolStudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Orbit.ORBIT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCHOOL_STUDENT_PRIMARY, Indexes.SCHOOL_STUDENT_SCHOOL_ID, Indexes.SCHOOL_STUDENT_STUDENT_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SchoolStudentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCHOOL_STUDENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SchoolStudentRecord> getPrimaryKey() {
        return Keys.KEY_SCHOOL_STUDENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SchoolStudentRecord>> getKeys() {
        return Arrays.<UniqueKey<SchoolStudentRecord>>asList(Keys.KEY_SCHOOL_STUDENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<SchoolStudentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SchoolStudentRecord, ?>>asList(Keys.SCHOOL_STUDENT_IBFK_1, Keys.SCHOOL_STUDENT_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchoolStudent as(String alias) {
        return new SchoolStudent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchoolStudent as(Name alias) {
        return new SchoolStudent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchoolStudent rename(String name) {
        return new SchoolStudent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchoolStudent rename(Name name) {
        return new SchoolStudent(name, null);
    }
}
